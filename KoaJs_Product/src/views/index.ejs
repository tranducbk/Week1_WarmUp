<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .product-card {
            transition: transform 0.3s;
        }
        .product-card:hover {
            transform: translateY(-5px);
        }
        .product-image {
            height: 200px;
            object-fit: cover;
        }
    </style>
</head>
<body class="bg-light">
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="/">Product Management</a>
            <button class="btn btn-light" data-bs-toggle="modal" data-bs-target="#addProductModal">
                <i class="fas fa-plus"></i> Add Product
            </button>
        </div>
    </nav>

    <div class="container mt-4">
        <div class="row mb-4">
            <div class="col-md-12 text-end">
                <select class="form-select" id="sortSelect" style="width: auto; display: inline-block;">
                    <option value="">Sort by</option>
                    <option value="asc">Oldest First</option>
                    <option value="desc">Newest First</option>
                </select>
            </div>
        </div>

        <div class="row" id="productList">
            <% products.forEach(product => { %>
                <div class="col-md-4 mb-4">
                    <div class="card product-card">
                        <img src="<%= product.image %>" class="card-img-top product-image" alt="<%= product.name %>">
                        <div class="card-body">
                            <h5 class="card-title"><%= product.name %></h5>
                            <p class="card-text text-muted"><%= product.description %></p>
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="h5 mb-0">$<%= product.price.toFixed(2) %></span>
                                <div class="btn-group">
                                    <button class="btn btn-sm btn-outline-primary edit-product" 
                                            data-id="<%= product.id %>"
                                            data-bs-toggle="modal" 
                                            data-bs-target="#editProductModal">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger delete-product" 
                                            data-id="<%= product.id %>">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            <% }); %>
        </div>
    </div>

    <!-- Add Product Modal -->
    <div class="modal fade" id="addProductModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addProductForm">
                        <input type="hidden" name="createdAt">
                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <input type="text" class="form-control" name="name" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Price</label>
                            <input type="number" class="form-control" name="price" step="0.01" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" name="description" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Product Type</label>
                            <input type="text" class="form-control" name="product" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Color</label>
                            <input type="text" class="form-control" name="color" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Image URL</label>
                            <input type="url" class="form-control" name="image" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="saveProduct">Save Product</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Product Modal -->
    <div class="modal fade" id="editProductModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editProductForm">
                        <input type="hidden" name="id">
                        <input type="hidden" name="createdAt">
                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <input type="text" class="form-control" name="name" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Price</label>
                            <input type="number" class="form-control" name="price" step="0.01" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" name="description" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Product Type</label>
                            <input type="text" class="form-control" name="product" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Color</label>
                            <input type="text" class="form-control" name="color" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Image URL</label>
                            <input type="url" class="form-control" name="image" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="updateProduct">Update Product</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Add Product
        document.getElementById('saveProduct').addEventListener('click', async () => {
            const form = document.getElementById('addProductForm');
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());
            data.id = Date.now(); // Generate temporary ID
            data.createdAt = new Date().toISOString();

            try {
                const response = await fetch('/api/products', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                if (response.ok) {
                    location.reload();
                } else {
                    const error = await response.json();
                    alert(error.errors.join('\n'));
                }
            } catch (error) {
                alert('Error adding product');
            }
        });

        // Edit Product
        document.querySelectorAll('.edit-product').forEach(button => {
            button.addEventListener('click', async () => {
                const id = button.dataset.id;
                try {
                    const response = await fetch(`/api/products/${id}`);
                    const product = await response.json();
                    
                    const form = document.getElementById('editProductForm');
                    form.id.value = product.data.id;
                    form.name.value = product.data.name;
                    form.price.value = product.data.price;
                    form.description.value = product.data.description;
                    form.product.value = product.data.product;
                    form.color.value = product.data.color;
                    form.image.value = product.data.image;
                    form.createdAt.value = product.data.createdAt;
                } catch (error) {
                    alert('Error loading product');
                }
            });
        });

        // Update Product
        document.getElementById('updateProduct').addEventListener('click', async () => {
            const form = document.getElementById('editProductForm');
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());

            try {
                const response = await fetch(`/api/products/${data.id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                if (response.ok) {
                    location.reload();
                } else {
                    const error = await response.json();
                    alert(error.errors.join('\n'));
                }
            } catch (error) {
                alert('Error updating product');
            }
        });

        // Delete Product
        document.querySelectorAll('.delete-product').forEach(button => {
            button.addEventListener('click', async () => {
                if (confirm('Are you sure you want to delete this product?')) {
                    const id = button.dataset.id;
                    try {
                        const response = await fetch(`/api/products/${id}`, {
                            method: 'DELETE'
                        });

                        if (response.ok) {
                            location.reload();
                        } else {
                            alert('Error deleting product');
                        }
                    } catch (error) {
                        alert('Error deleting product');
                    }
                }
            });
        });

        // Sort
        document.getElementById('sortSelect').addEventListener('change', async () => {
            const sort = document.getElementById('sortSelect').value;
            if (sort) {
                try {
                    const response = await fetch(`/api/products?sort=${sort}`);
                    const data = await response.json();
                    location.reload();
                } catch (error) {
                    alert('Error sorting products');
                }
            }
        });
    </script>
</body>
</html> 